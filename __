#!/usr/bin/perl
use strict;
use warnings;
use 5.10.0;

# active aliases -- see http://gitolite.com/active-aliases (or __.mkd in the
# source repo) for documentation

# the idea of applying a series of transformations to a command based on
# matching a list of patterns is not new.  If you don't know where I got it
# from, you're not old enough ;-)

# NOTE: at present the "config" for this is right here in this file.  If
# anyone other than me actually starts using it, it may be worth moving into a
# separate file so the code can be updated cleanly.

use URI::Escape;

# we need the full command as one string, but we take care to escape the
# spaces first, so we can split out arguments properly later
my $fullcmd = join( " ", map { esc($_) } @ARGV );
my $cmd_name = shift;

# now we need to get the pattern+replacement list, which comes from the
# following sources, in sequence:
#       dirname($0)/.__rc   # shipped rc file
#       $PWD/.__rc
#       $PWD/../.__rc       # that is, .__rc in the parent of $PWD
#       ...and so on...     # all the way upto $HOME
# Note: if $PWD is not within $HOME, we behave as if we were in $HOME (i.e.,
# only the shipped rc file and the one in $HOME are used).

@ARGV = get_rc_filenames();

# completion help
_commands() if $cmd_name eq '_commands';     # does not return

my $cont = '';
while (<>) {
    chomp; next unless /\S/; next if /^\s*#/;

    if ($cont) { s/^\s+//; $_ = $cont . $_; $cont = '' }
    if (/\\$/) { s/\\$//; $cont = $_; next }

    my ( $cmd, $pattern, $repl, $cond ) = split /\t/;
    next unless $cmd eq $cmd_name or $cmd eq 'ALL';
    # 'cmd' field eq 'ALL' means apply this transform to ANY incoming command
    $cond ||= '';    # avoid undef warnings later

    my $f0 = "$.\t$pattern" if $ENV{D};
    # for debug printing only; not needed otherwise

    # replace %% and % in "pattern" string with actual regex sequences
    $pattern =~ s/%%/(.+)/g;
    $pattern =~ s/%/(\\S+)/g;
    $pattern = "^$pattern(?= |\$)";

    # skip if the fullcmd doesn't match the pattern in this line
    next unless $fullcmd =~ qr($pattern);
    say STDERR $f0 if $ENV{D};

    # extract the groups that matched and save them
    my @matches = $fullcmd =~ qr($pattern);
    # add a dummy entry at the start to make the indexes 1-based for
    # convenience in later steps
    unshift @matches, 0;

    # evaluate the extra condition line, if supplied, and skip this line if
    # things didn't work out
    if ($cond) {
        $cond =~ s/%(\d+)/$matches[$1]/gm;
        $cond = unesc($cond);
        say STDERR "?\t$cond" if $ENV{D};
        my $rc = eval $cond;
        say STDERR "X\t'$@'" unless defined($rc);
        say STDERR "!\t'$rc'" if $ENV{D} and $rc;
        next if not $rc;
    }

    # change the "repl" string using the matched substrings
    $repl =~ s/%(\d+)/$matches[$1]/gm;
    # and if it now contains a backtick, reduce it to the output of the
    # command inside backticks
    if ( $repl =~ /`/ ) {
        say STDERR "`\t$repl" if $ENV{D};
        $repl =~ s/`(.*?)`/_shell($1)/ge;
    }

    # now reduce to the new command
    $fullcmd =~ s($pattern)($repl);
    ($cmd_name) = split ' ', $fullcmd;

    say STDERR "=\t$fullcmd" if $ENV{D};
}

# unescape arguments for execution.  If an argument contains spaces, it is
# quoted so the shell is happy.
$fullcmd = join " ", map { quote_unesc($_) } split ' ', $fullcmd;
say STDERR "+$fullcmd" unless $fullcmd =~ s(^\@)();
no warnings;
exec("$fullcmd") or die "__: $cmd_name: command not found\n";

# ----------------------------------------------------------------------

sub _shell {
    my $x = shift;
    $x = `$x`;
    # escape the results of the execution but not across lines
    # XXX WARNING XXX
    # i.e., this behaves like 'map', not 'xargs' (one line is one "item")
    $x = esc($x);
    $x =~ s/\n+/ /g;
    return $x;
}

sub esc {
    return uri_escape( +shift, "% " );
    # we don't really want to escape anything except a space but we have
    # to escape the % also, since that is the lead character for the
    # escape sequence
}

sub unesc {
    return uri_unescape( +shift );
}

sub quote_unesc {
    my $in = shift;
    $in = '"' . $in . '"' if $in =~ /%20/;
    return unesc($in);
}

# ----------------------------------------------------------------------

sub get_rc_filenames {
    use Cwd;
    my $bd = $1 if $0 =~ m((.*)/);
    my $home = $ENV{HOME};
    my $cur = getcwd;

    # if we're not starting from a subdir of $home, we pretend we're in $home
    # for the purposes of finding rc files
    $cur = $home if index($cur, $home);

    my @ret = ("$bd/.__rc");    # shipped rc file
    while (1) {
        push @ret, "$cur/.__rc" if -f "$cur/.__rc";
        last if $cur eq $home;
        $cur =~ s(/[^/]+$)();
    }

    if ($ENV{D}) {
        require Data::Dumper;
        say Data::Dumper::Dumper(\@ret);
    }

    return @ret;
}

sub _commands {
    my %commands;
    while (<>) {
        print if s/^## //;
    }

    exit 0;
}
