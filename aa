#!/usr/bin/perl
# TODO:
#   help system
#   should we use the cond result in the command as %?
#   "-x" mode if the final command that is run, starts with "+ "
#   finish the documentation, including translating all the examples to the new syntax
use strict;
use warnings;
use 5.10.0;
use Data::Dumper;

$Data::Dumper::Indent = 0;
$Data::Dumper::Terse = 1;
$Data::Dumper::Useqq = 1;

sub trace;

my @queue;
setup();
# deal with @ARGV, decide what rc files to use, and set up the queue

while (@queue) {
    my @cmd   = @{ shift(@queue) };
    my @lines = @{ shift(@queue) };
    trace "dequeue: ", scalar(@lines), " lines, ", Dumper \@cmd;
    # trace "dequeue: first line: ", $lines[0];
    do_1( \@cmd, \@lines );
}

my %share;

sub do_1 {
    my @cmd = @{ +shift };
    my @lines = @{ +shift };

    while (my $line = nextline('patt', \@lines)) {
        last if /__END__/;
        chomp($line);

        # match the current "pattern" line to the current command
        my $res = match($line, @cmd);
        if ($res) {
            trace "pass: $line matches ", Dumper \@cmd;

            # if the match succeeded, you get back a "tail", which is the list
            # of arguments left over after the command matched the pattern
            # (typically, a list of files to be processed), and a list of
            # strings from matched groups in the pattern
            my @tail = @{ $res->[0] };
            my @groups = @{ $res->[1] };
            trace "cmd, tail, groups = ", Dumper \@cmd, \@tail, \@groups;

            my @subqueue = ();

            # now grab the "body", which is the optional "condition" (block of
            # perl code in a single string), and the list of (one or more)
            # commands to run and/or replace the current one, but only if the
            # first block returned true on eval (or was empty).
            my $ccr = nextline('blocks', \@lines);    # cond + commands/replacement
            trace "ccr: ", Dumper $ccr;

            %share = ( 'cmd' => \@cmd, 'tail' => \@tail, 'groups' => \@groups );
            sub get_stuff {
                return @{ $share{shift()} };
            }

            # evaluate the condition, if it is present; bail if it returns false
            if ($ccr->[0]) {
                my $res = _eval($ccr->[0], @groups);
                next unless $res;
            }

            # and now the commands...
            my @commands = @{ $ccr->[1] };

            # if the first command is a "meta" command, then all of them have
            # to be.  NOTE: we may have to rethink not allowing %metas to mix
            # with normal commands, or at least add a %queue meta to help out,
            # if we find queue inversions with %each.  Or find some other
            # solution specific to %each.  (Or the user may get creative, by
            # using yet another %each to un-invert the queue; see test suite
            # item t13).
            if ($commands[0] =~ /^%[a-z]+ /) {
                for my $mc (@commands) {
                    # interpolate before sending the line off to meta().
                    # Except for %s, which has/needs its own internal one
                    $mc = interpolate($mc, @groups) unless $mc =~ /^%s /;

                    @cmd = meta($mc, \@cmd, \@tail, \@subqueue);
                }

                # some metas, like %each and %shell, cannot continue
                # processing (%each would have queued up other commands, and
                # %shell would have actually *run* some commands

                unshift @queue, $_, [ @lines ] for reverse @subqueue;
                return unless @cmd;
                next;   # get out of this loop
            }

            # now they are either commands to replace the current command (and
            # thus continue being processed by the rest of the rc lines), or
            # -- if the first character is a "!" -- a command to be executed
            # immediately.
            for my $sc (@commands) {
                if (0) {
                    # TBD; deal with "!"
                    run($sc, \@tail, @groups);
                } else {
                    # "processed by the rest of the rc lines" actually means
                    # we add to the queue (remember the queue, at the top of
                    # the program?)  This basically allows one command to
                    # spawn multiple commands.  Yes it's useful.  I think :)
                    my @newcmd = split(' ', $sc);
                    for my $c (@newcmd) {
                        $c = interpolate($c, @groups);
                    }
                    if ($newcmd[-1] eq "%.") {
                        pop @newcmd;
                    } else {
                        push @newcmd, @tail;
                    }
                    push @subqueue, [ @newcmd ];
                }
            }

            unshift @queue, $_, [ @lines ] for reverse @subqueue;
            return;
        }
    }

    # what's left in @cmd at this point is the end result
    trace "final: ", Dumper \@cmd;
    _system(@cmd);
}

# match the current pattern with the current @cmd.  Returns an empty array if
# match fails, otherwise [ \@tail, \@groups ], where @tail is the part of @cmd
# that did not get used up in matching with the pattern, and @groups is the
# combined list of matched sub-expressions, including those representing a "%"
# (a whole word to be captured)
sub match {
    my $patt = shift;
    my @cmd = @_;

    my @patt = split ' ', $patt;
    my @groups = qw(dummy);
    # start with a dummy so indexing of the actual matched groups can be 1-based

    # the left side is the current command, right side is the pattern.  Go
    # through them item by item (or "word by word", if you will)
    while (@cmd and @patt) {
        my $l = shift @cmd;
        my $r = shift @patt;

        if ($r eq '@') {
            die "'@' must be the last item in pattern\n" if @patt;
            unshift @cmd, $l;
            last;   # @patt should be empty and @cmd, what's left of it, will be @tail
        }
        $r = '(.*)' if $r eq '%';
        my $rp = qr(^$r$);

        if ($l eq $r) {
            # do nothing
        } elsif ($l =~ /$rp/) {
            # redo match in list context
            my @g = ($l =~ /$rp/);
            # @g = () if (@g == 1 and $g[0] eq "1"); # no parens; perl returns qw(1)
            push @groups, @g if @g;
        } else {
            return ();
        }
    }

    # more of the pattern exists, but our current @cmd ran out, so clearly
    # this is not a match
    return () if @patt;

    return [ \@cmd, \@groups ];
}

# ----------------------------------------------------------------------
# meta, interpolate, and shemulate -- all of these have to do with munging the
# command+arguments in some way

# meta commands in the rc file are special "escape" routines to do more
# complex things that cannot be done directly
sub meta {
    my $mc = shift;
    my @cmd = @{ shift() };
    my @tail = @{ shift() };
    my $subqueue = shift;

    trace "meta: mc = $mc";

    # "%s <expr> %with <expr>" does pretty much the equivalent of s/foo/bar/,
    # except it is word by word, and the replacement can be more then one
    # word.  Note that @cmd includes @tail, so we don't have to treat tail
    # separately
    if ($mc =~ /^%s (.*) %with (.*)/) {
        my $f = $1;
        my @t = split ' ', $2;
        trace "pre-%s: ", Dumper $mc, $f, \@t;
        trace "pre-%s: ", Dumper \@cmd;

        my @newcmd = ();
        for (@cmd) {
            if (/^$f$/) {
                my @g = (/^$f$/);
                unshift @g, ''; # make it 1-relative for interpolate()
                for my $t (@t) {
                    push @newcmd, interpolate($t, @g);
                }
            } else {
                push @newcmd, $_;
            }
        }

        trace "%s: " . join("|", @newcmd);
        return @newcmd;
    }

    # "%each <command+args>" runs the command+args on each of the words in the
    # "tail" (such as a list of files).  Useful when the command can't process
    # multiple files at a time
    if ($mc =~ /^%each (.*)/) {
        my @c = split ' ', $1;
        trace "each: ", Dumper \@c, \@tail;
        for (@tail) {
            push @$subqueue, [ @c, $_ ];
        }
        return ();
    }

    # "%shell <shell command>" runs the command supplied as a shell command.
    # This is potentially dangerous if the files have shell-unsafe names, but
    # sometimes you gotta do what you gotta do!  We also append the tail...
    # (TBD: quote each member of @tail before joining)
    if ($mc =~ /^%shell (.*)/) {
        my $sc = $1;
        if ($sc =~ /(.*)%@(.*)/) {
            $sc = $1 . join(" ", @tail) . $2;
        } else {
            $sc = join(" ", $1, @tail);
        }
        trace "shell ", Dumper $sc;
        _system("sh", "-c", $sc);
        return qw(true);
    }

    # "%args <cmd> <expr>" runs the expr as a shell command, captures the output,
    # and uses that as the new argument list (new-line separated, not space
    # separated; i.e., one argument per line.  Tail handling is same as %shell
    if ($mc =~ /^%args (\S+) (.*)/) {
        my $cmd = $1;
        my $sc = $2;
        if ($sc =~ /(.*)%@(.*)/) {
            $sc = $1 . join(" ", @tail) . $2;
        } else {
            $sc = join(" ", $sc, @tail);
        }

        my @args = `$sc`;
        chomp(@args);
        trace "args: ", Dumper \@args;
        return ($cmd, @args);
    }

    # # XXX DO NOT USE UNTIL WE ARE SURE IT IS REALLY NEEDED, MAY BITROT XXX
    # # "%map <expr>" evaluates the perl expr for each word in the current
    # # command and replace with the result
    # if ($mc =~ /^%map (.*)/) {
    #     my $e = $1;
    #     @cmd = map { eval $e } @cmd;
    #     # # for (@cmd) {
    #     # #     my $rc = eval $e;
    #     # #     die $@ unless defined($rc);
    #     # # }
    #     trace "post-map: ", Dumper \@cmd;
    #     return @cmd;
    # }

    die "not a valid meta command";
}

# emulate shell, poorly :-)  Just $var, ${var}, and "~/" are handled for now.
sub shemulate {
    my @a = @_;
    # mangle list_ to do some simple shell like substitutions; may break this
    # out into its own sub if it gets much more complicated (like, if we start
    # handling redirection or pipes!)
    map { s(\$\$)($$)g } @a;
    map { s(^~/)($ENV{HOME}/) } @a;
    map { s(\$(\w+))($ENV{$1})g } @a;
    map { s(\$\{(\w+)\})($ENV{$1})g } @a;
    # NOTE: warn in documentation that complex stuff (like, say "${var:-val}
    # etc won't work; we're not a shell!

    return @a;
}

# interpolate %1, %2, etc using matched groups found from match()
sub interpolate {
    my $c = shift;
    # that leaves @groups in @_;
    $c =~ s/%(\d+)/$_[$1]/gm;
    $c;
}

# ----------------------------------------------------------------------
# routines at the next lower level of abstraction

# return the next logical line.  When called with 'patt' as the argument,
# return the next pattern line.  When called with 'blocks', return the
# conditional block, if any, as a single string, followed by a reference to
# the list of commands to run
sub nextline {
    my $want = shift;
    my $lines =shift;
    while (@$lines) {
        if ($want eq 'patt') {
            $_ = get($lines);
            redo if /^\s/;  # code block lines from a failed pattern; skip
            return $_;      # line starts with \S
        }

        # that leaves $want eq 'blocks'

        my $cond = '';
        my @newcmd = '';

        $_ = get($lines);

        if (s/^    \?   //) {
            $cond = $_;
            while ($_ = get($lines)) {
                last unless s/^        //;
                $cond .= $_;
            }
        }

        if (s/^    //) {
            @newcmd = ($_);
            while ($_ = get($lines)) {
                last unless s/^    //;
                chomp;
                push @newcmd, $_;
            }
        }

        unget($_, $lines);

        return [ $cond, \@newcmd ];
    }
}

# just a perl eval, but first interpolate() groups found earlier by match()
sub _eval {
    my $e = shift;      # expression
    # that leaves @groups in @_

    $e = interpolate($e, @_);

    trace "eval: $e";
    my $rc = eval $e;
    say STDERR "eval failed; $@" unless defined($rc);
    return $rc;
}

# call system to run a command, but first interpolate()
sub run {
    my $c = shift;
    my $tail = shift;
    # that leaves @groups in @_

    my @c = split(' ', $c);
    for my $c (@c) {
        $c = interpolate($c, @_);
    }

    trace "run: ", Dumper \@c, $tail;
    _system(@c, @$tail);
}

# ----------------------------------------------------------------------
# general purpose routines that came from elsewhere or could also go elsewere,
# with a little bit of munging

sub get {
    my $lines = shift;
    return "" unless @$lines;
    my $r = shift @$lines;
    while ($r =~ /^\s*#/ or $r =~ /^\s*$/) {
        return "" unless @$lines;
        $r = shift @$lines;
    }
    return $r;
}
sub unget {
    my $l = shift;
    my $lines = shift;
    unshift @$lines, $l;
}

# run a command, but first shemulate()
sub _system {
    @_ = shemulate(@_) unless @_ > 2 and $_[0] eq 'sh' and $_[1] eq '-c';
    print STDERR join(" ", "+", @_) . "\n" if defined $ENV{D};

    # run system(), catch errors.  Be verbose only if $ENV{D} exists.  If not,
    # exit with <rc of system()> if it applies, else just "exit 1".
    if ( system(@_) != 0 ) {
        say STDERR "system() failed: ", join(" ", @_), " -> $?";
        if ( $? == -1 ) {
            die "failed to execute: $!\n" if $ENV{D};
        } elsif ( $? & 127 ) {
            die "child died with signal " . ( $? & 127 ) . "\n" if $ENV{D};
        } else {
            die "child exited with value " . ( $? >> 8 ) . "\n" if $ENV{D};
            exit( $? >> 8 );
        }
        exit 1;
    }
}

sub trace {
    return unless $ENV{D};
    say STDERR "[$$] ", @_;
}

sub setup {

    # if the first character of the first word in the command is a dash, we
    # have to remove it (see documentation); this allows you to trivially
    # override real commands and force them to go through active-aliases
    $ARGV[0] =~ s/^-//;

    # treat newlines embedded in arguments as argument separators.  This lets
    # you operate on file lists, such as the output of "`find ...`" (note the
    # double quotes).
    @ARGV = split("\n", join("\n", @ARGV));

    # the queue always contains an even number of entries, the first a ref to
    # the current command, and the second a ref to a list of rc lines to be
    # processed.  The first pair comes from the command line arguments and the
    # entire contents of the rc files.  During processing of this pair, more
    # pairs can be pushed to the end of the queue (but it will eventually run
    # out, not to worry!)
    push @queue, [ @ARGV ];     # this becomes the initial command

    # ----------------------------------------------------------------------
    # what rc file do we use?

    if ($ENV{AA_RC} and -f $ENV{AA_RC}) {
        @ARGV = ($ENV{AA_RC});  # only the one file in this case
    } else {
        @ARGV = ();
        # first, the one from the current directory, but only if it is within $HOME
        push @ARGV, "$ENV{PWD}/.aarc" if $ENV{PWD} ne $ENV{HOME}
                              and !index($ENV{PWD},   $ENV{HOME})
                                 and -f "$ENV{PWD}/.aarc";
        # next, the one in ~, and then the one in ~/.config (note the latter
        # one is called "aarc" not ".aarc")
        push @ARGV, grep { -f } ( "$ENV{HOME}/.aarc", "$ENV{HOME}/.config/aarc" );
        # the overall idea is that the one in ~/.config will be on all your
        # machines (if you have a "dot file" git repo, for instance, it will
        # have this), and the one in your ~ will be specific to this user (for
        # example user versus root, or if, like me, you use different userids
        # for different tasks)
    }
    my @lines = <>;     # which, as you know, eats up @ARGV;
    push @queue, \@lines;

    # ----------------------------------------------------------------------
    # setup some env vars and such, for convenience

    $ENV{_tty} = ( -t ? 1 : 0 );

}
